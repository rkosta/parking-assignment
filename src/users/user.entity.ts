import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';

@Entity()
/* The class `User` defines properties for a user entity with fields for id, first name, last name,
email, role, and token. */
export class User {
  @PrimaryGeneratedColumn()
  /* The line `id: number;` in the `User` class is defining a property called `id` with a type
  annotation of `number`. This property represents the unique identifier for each user entity in the
  database table. The `@PrimaryGeneratedColumn()` decorator above the `id` property indicates that
  this field is the primary key for the entity and its value will be automatically generated by the
  database system upon insertion of a new record. */
  id: number;

  @Column({
    nullable: false,
  })
  /* The line `firstName: string;` in the `User` class is defining a property called `firstName` with a
  type annotation of `string`. This property represents the first name of a user entity in the
  database table. The `@Column` decorator above the `firstName` property specifies that this field
  corresponds to a column in the database table and provides additional configuration options such
  as `nullable: false`, which means that the `firstName` field cannot be null (i.e., it must have a
  value). */
  firstName: string;

  @Column({
    nullable: false,
  })
  /* The line `lastName: string;` in the `User` class is defining a property called `lastName` with a
  type annotation of `string`. This property represents the last name of a user entity in the
  database table. The `@Column` decorator above the `lastName` property specifies that this field
  corresponds to a column in the database table and provides additional configuration options such
  as `nullable: false`, which means that the `lastName` field cannot be null (i.e., it must have a
  value). */
  lastName: string;

  @Column({
    nullable: false,
  })
  /* The line `email: string;` in the `User` class is defining a property called `email` with a type
  annotation of `string`. This property represents the email address of a user entity in the
  database table. The `@Column` decorator above the `email` property specifies that this field
  corresponds to a column in the database table and provides additional configuration options such
  as `nullable: false`, which means that the `email` field cannot be null (i.e., it must have a
  value). */
  email: string;

  @Column({
    nullable: false,
    default: false,
  })
  /* The line `isAdmin: boolean;` in the `User` class is defining a property called `isAdmin` with a 
  type annotation of `boolean`. This property represents the role of a user entity in the database
  table. The `@Column` decorator above the `isAdmin` property specifies that this field corresponds
  to a column in the database table and provides additional configuration options such as
  `nullable: false`, which means that the `isAdmin` field cannot be null (i.e., it must have a value),
  and `default: false`, which means that the `isAdmin` field will have a default value of `false` if
  not explicitly provided. */
  isAdmin: boolean;

  @Column({
    nullable: false,
    unique: true,
  })
  /* The line `token: string;` in the `User` class is defining a property called `token` with a type
  annotation of `string`. This property represents a token associated with a user entity in the
  database table. The `@Column` decorator above the `token` property specifies that this field
  corresponds to a column in the database table and provides additional configuration options such
  as `nullable: false`, which means that the `token` field cannot be null (i.e., it must have a
  value), and `unique: true`, which enforces uniqueness constraint on the `token` values in the
  database table. */
  token: string;
}
