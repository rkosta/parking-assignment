import { Booking } from '../bookings/booking.entity';
import { Role } from '../permissions/role.enum';
import { Column, Entity, OneToMany, PrimaryGeneratedColumn } from 'typeorm';

@Entity()
/* The class `User` defines properties for a user entity with fields for id, first name, last name,
email, role, and token. */
export class User {
  @PrimaryGeneratedColumn()
  /* The line `id: number;` in the `User` class is defining a property called `id` with a type
  annotation of `number`. This property represents the unique identifier for each user entity in the
  database table. The `@PrimaryGeneratedColumn()` decorator above the `id` property indicates that
  this field is the primary key for the entity and its value will be automatically generated by the
  database system upon insertion of a new record. */
  id: number;

  @Column({
    nullable: false,
  })
  /* The line `firstName: string;` in the `User` class is defining a property called `firstName` with a
  type annotation of `string`. This property represents the first name of a user entity in the
  database table. The `@Column` decorator above the `firstName` property specifies that this field
  corresponds to a column in the database table and provides additional configuration options such
  as `nullable: false`, which means that the `firstName` field cannot be null (i.e., it must have a
  value). */
  firstName: string;

  @Column({
    nullable: false,
  })
  /* The line `lastName: string;` in the `User` class is defining a property called `lastName` with a
  type annotation of `string`. This property represents the last name of a user entity in the
  database table. The `@Column` decorator above the `lastName` property specifies that this field
  corresponds to a column in the database table and provides additional configuration options such
  as `nullable: false`, which means that the `lastName` field cannot be null (i.e., it must have a
  value). */
  lastName: string;

  @Column({
    nullable: false,
  })
  /* The line `email: string;` in the `User` class is defining a property called `email` with a type
  annotation of `string`. This property represents the email address of a user entity in the
  database table. The `@Column` decorator above the `email` property specifies that this field
  corresponds to a column in the database table and provides additional configuration options such
  as `nullable: false`, which means that the `email` field cannot be null (i.e., it must have a
  value). */
  email: string;

  @Column({
    nullable: false,
    unique: true,
  })
  /* The line `token: string;` in the `User` class is defining a property called `token` with a type
  annotation of `string`. This property represents a token associated with a user entity in the
  database table. The `@Column` decorator above the `token` property specifies that this field
  corresponds to a column in the database table and provides additional configuration options such
  as `nullable: false`, which means that the `token` field cannot be null (i.e., it must have a
  value), and `unique: true`, which enforces uniqueness constraint on the `token` values in the
  database table. */
  token: string;

  /* The `@OneToMany` decorator above the `bookings` property specifies the relationship between the
  `User` entity and the `Booking` entity. This relationship indicates that a user can have multiple
  bookings associated with them. The `@OneToMany` decorator takes two arguments: a function that
  returns the related entity class (`() => Booking`) and a function that returns the related property
  in the related entity class (`(booking) => booking.user`). */
  @OneToMany(() => Booking, (booking) => booking.user)
  /* The line `bookings: Booking[];` in the `User` class is defining a property called `bookings` with
  a type annotation of `Booking[]`. This property represents an array of booking entities associated
  with a user entity in the database table. */
  bookings: Booking[];

  /* The `@Column` decorator above the `role` property specifies that this field corresponds to a
  column in the database table and provides additional configuration options such as `enum: Role`,
  which specifies that the `role` field can only have values from the `Role` enum, and `default:
  Role.USER`, which means that the `role` field will have a default value of `Role.USER` if not
  explicitly provided. */
  // CONSIDERATION: In real life production systems, a user should have one or more roles, not just one.
  // and the roles should also be stored in a separate table and managed by an admin user. The roles
  // shouldn't be hardcoded in the code with an enum.
  @Column('enum', { enum: Role, default: Role.USER })
  role: Role;
}
